// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// data/auth/keygen.go
// data/auth/private.rsapem.key
// data/auth/public.rsapem.key
package unkauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAuthKeygenGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\xdb\x40\x10\xc5\xcf\xde\x4f\x31\xd5\x21\x48\x45\x28\x31\xb4\x85\x18\x7c\xa8\x8d\x28\xc6\x0d\x98\x24\x2d\xed\x71\x2d\x8f\x9c\x45\xd2\xee\x32\xbb\x36\x51\x8d\xbf\x7b\xd9\xd5\x3f\x2b\x7f\x7a\xe9\xcd\x9e\x9d\x79\xef\xcd\x6f\xa4\x79\x56\xf0\x3d\x42\xc5\x85\x64\x4c\x54\x5a\x91\x85\x90\x01\x00\x04\x19\xd5\xda\xaa\x6b\x32\x3c\x18\x17\xb8\xdc\xb5\x15\x65\xda\x1f\x79\x65\xc7\x4d\xcf\x9f\x6f\x6e\xdb\x0a\xca\x4c\xed\x84\xdc\x5f\x6b\xac\x02\x16\x31\xc6\xf2\x83\xcc\xbc\x65\x18\xc1\xc9\x37\x11\xf2\x1d\x12\xcc\xe6\xe0\xd4\x93\x7b\xff\xd7\xbf\x6c\x85\x7d\x10\x7f\xd0\x3d\x7d\xba\xb9\xfd\xe2\x6b\x9a\xc4\xb1\xc0\x3a\x06\xa4\x66\xc6\xf0\xe4\x1b\x4a\x24\x6e\x71\x8d\x75\xd8\xa8\xc5\xdd\x6c\xe4\x87\xb2\x27\xcc\x8a\x94\x48\x51\x88\x44\x4d\x4d\x1f\xb6\x05\xd6\x4e\xa2\x95\x4c\x36\x87\x6d\x29\xb2\x35\xd6\xcc\x37\x18\x7e\xc4\x4d\x7a\xe7\x44\x03\xd7\xc2\x2d\x26\x64\xb8\xc6\x2a\x29\xb0\x0e\xe2\x6e\x2e\x1a\xba\xbd\x40\x3f\xe3\xff\xbd\x18\xf1\xa6\x11\x63\xe7\x96\xc4\x85\x49\x2e\x4a\x94\xbc\x42\x30\x96\x84\xdc\xc7\xe0\xe2\x7d\x74\xfb\x6d\x1a\xf7\x35\xd6\x1d\x33\x75\xb0\xae\xbd\xa7\xa0\x4c\xb2\x24\xe4\x16\x7b\x95\xf7\x17\xdf\x61\x8e\xd4\x29\x24\xcb\x52\x19\x0c\xa3\x66\xe5\x23\x27\xd0\xbd\x19\xcc\xe1\xca\x45\x5f\x94\x2a\x2b\x4e\x6c\xf2\x58\x6b\x9c\x41\xb0\xb9\x5f\xfd\xfc\xfa\x98\xc2\x3a\xfd\x1d\xc4\x6c\xb2\xa8\x2d\x9a\x19\xb8\xa3\x27\x77\x9c\xcc\x13\x2f\x37\xeb\xe5\xc3\x74\x08\x1d\xba\x95\x63\x6f\x70\x6e\x7c\x5c\xea\x39\x38\xed\xd4\x7d\x20\x18\xf6\xfb\x0c\xee\x6f\x2f\x30\xe2\x76\x89\xfb\x15\xbd\xf6\xbe\x9e\x5f\x77\xd8\x0e\x1f\x37\x72\xba\x75\xb9\x7b\x80\xe3\xf8\xab\x5f\xfd\x48\x78\xd5\xdd\xec\xad\x38\x03\x35\xac\x8a\xf7\x89\xfd\x58\x7c\x5f\x2d\x5f\x00\x1b\x32\x5c\x92\xd1\x58\xfd\xe7\x61\x5b\x85\xf1\x61\x5f\x01\xef\x7d\x9a\xe0\xff\x86\x3d\xd4\xc1\x3d\x38\x35\x45\x1d\x4b\x91\x7b\xf5\x0f\x73\x90\xa2\x84\x13\x9b\xe4\x95\x75\x5f\xac\xb4\xa5\x0c\x83\x9c\x5b\x5e\x36\x03\x33\x08\xfc\x5a\x49\xe3\x10\x45\x6c\xa2\x4c\x92\x3e\x0b\x1b\x4e\xa3\x96\xc1\x99\xfd\x0d\x00\x00\xff\xff\x43\xbf\x89\xe8\x96\x04\x00\x00")

func dataAuthKeygenGoBytes() ([]byte, error) {
	return bindataRead(
		_dataAuthKeygenGo,
		"data/auth/keygen.go",
	)
}

func dataAuthKeygenGo() (*asset, error) {
	bytes, err := dataAuthKeygenGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/auth/keygen.go", size: 1174, mode: os.FileMode(436), modTime: time.Unix(1599845094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataAuthPrivateRsapemKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x97\xb7\x0e\xac\x8a\x01\x44\x7b\xbe\xe2\xf5\xc8\x22\xa7\x92\x9c\x59\xd2\xb2\x40\x47\xce\x39\xf3\xf5\xd6\xbd\x76\xf7\xa6\x9c\xf2\x68\xa4\xd1\xf9\xcf\x9f\x70\xa2\xac\x5a\xff\xd8\xae\x1a\xb0\xbe\xf8\x8f\x2e\x46\x7f\x5b\xc0\x54\x55\x4d\x77\x54\x8e\x65\x75\x9e\xad\x44\x16\x96\x5d\xe6\xe3\xa2\xfc\x76\x44\x06\xcf\x71\xae\x98\x23\x1d\x26\x22\x0d\x07\x13\x07\x49\x52\x67\x05\x0f\x48\x6c\xb3\x1f\xb9\xfc\xbe\x23\x06\x2b\xc0\xf4\xe8\xa9\x34\xb4\x89\xad\x42\x50\xe9\xe2\xa5\x78\xb9\x93\x89\xa2\x61\xcf\x5d\xd0\xe4\xf5\xda\x62\x8f\x09\x26\xa7\x1b\x86\x34\x52\x5d\x32\x7c\x91\x2e\x44\xbf\xba\xb8\xb7\xbf\x5d\x48\x35\x08\xd0\x31\xe2\x64\x6c\xcf\x2d\xc5\x30\x7e\x92\xf0\x5a\x61\x9c\xfa\x74\x16\x3a\xf6\xe4\x19\xa8\x20\x8c\x34\x0a\x69\xb7\x58\x33\x6d\xdb\xd7\x76\x0a\xfd\x40\x0a\x0c\xf4\xab\xef\xea\x8e\x98\xe8\xd0\x23\x40\xb9\x9c\xfc\x5e\x52\x79\x45\x65\x8c\x36\x81\x2e\x8c\xad\x63\x6a\x3c\xf4\x74\x0b\x4c\x51\xce\xf9\xdd\xb4\x8a\x94\xed\x2d\xeb\xb9\xc8\xc7\x36\x53\x8d\x14\xb1\x28\x0f\x53\x0f\x2b\x74\x64\xcd\x15\x48\xf2\x73\xb2\x6a\x4f\x33\xb5\x4b\xcf\x85\x10\x32\xe6\xd5\xa5\xc9\x01\xdb\xdd\x48\xc4\x67\x6b\xc8\xdb\xf6\xe7\x31\xc3\x83\x2b\x81\x9b\xaf\x99\x86\x0c\x14\x07\x42\x1f\x19\x57\x7a\xf4\x6b\xd4\x33\x80\x7b\x27\x44\x63\x91\x50\xf0\x7e\x5c\x8f\x02\xbc\x98\xba\x88\xc3\x3b\x38\xac\xba\x34\xd3\x09\xbb\x3c\x31\x08\x72\x3c\xc7\xe5\x69\x63\x7e\x8e\x2d\x4f\xb2\xd9\x13\xca\x0d\x2a\x58\xa8\x0a\x76\x0c\xb8\xa3\x86\xa5\x8f\xd1\x90\xa8\x52\x44\x6e\xab\x35\x4f\x08\x93\xeb\x57\xe9\xcc\x8b\xde\x14\xbe\x11\x5c\x38\x92\x27\x21\x16\x0f\x41\x74\xc9\xe3\xc1\xbd\x22\x39\xe4\x3a\xbb\x8e\xd5\x4f\x77\x9f\x05\xae\x62\xfe\x20\xdd\x98\xe0\xe4\x16\x20\x01\x5b\x0f\x7b\x96\x4b\x25\xab\xe3\x87\x75\x87\xbb\xef\x42\x9a\x8c\xf8\x33\x18\xbf\xf1\xc4\xc2\x38\x38\x9d\xee\xea\x3b\xa1\xc1\x8e\x33\xd9\xcf\x02\x8a\x00\x26\x28\xcb\xc8\x48\x5d\xa4\xf0\x73\x51\xbb\x20\x21\x8a\x2e\x84\x3b\x37\x53\xa8\x6f\x1e\xde\xb8\xa3\x82\x7d\xea\x62\xb4\xe5\x40\x19\x93\x3e\xce\x1c\x53\xba\xed\x08\x8b\x42\x52\xc5\x19\xb3\x7e\x80\x98\xbc\x9f\xcc\xed\x7a\x3c\x2d\x62\x53\x0d\x1b\x1d\xa9\xbe\xa3\x1a\x21\x3f\xe6\xa9\x1d\x42\x88\xaf\xef\xbd\xcf\x10\xf6\x96\x69\x60\x2d\xa8\xe5\x3e\xb7\xff\xaa\xd3\xec\x06\xec\x3c\xdb\x2a\xce\x01\x50\x22\xdd\x39\x1e\xca\x4d\x99\x46\xfb\x57\xa2\x99\xa1\x27\xe9\x0e\x71\xda\x6c\xf3\x70\x02\x9a\x0b\x1a\x52\x0f\x2a\xed\x42\x87\xe5\xed\x09\xa3\x53\x18\x2c\xbd\xab\x01\x47\x1f\xe6\xd9\x4b\x64\x01\xd6\xf9\xdf\x84\x1f\xe7\x5d\xcc\xf7\xae\x13\x1e\x62\x31\x6b\xe5\x14\x21\xc3\x27\x5a\xff\x8e\x1f\xe8\x41\xa9\x0c\x9c\x75\x66\x33\x1a\x25\x3d\xec\x1c\x66\x67\xba\x7e\x9e\xc8\xa0\x9b\xb4\x00\xee\x26\xc3\xe4\xc9\x64\x21\xe6\x84\x47\xb6\xf7\x2b\x21\xb8\xce\x0a\xf4\xc3\x2f\xed\x30\xfc\x3a\xdd\x1f\x75\xe8\xd8\xa7\x96\xb3\x6a\x0a\x83\x7e\x24\x6c\xd5\xa6\xd7\x51\xea\x1d\x63\x2e\x63\x44\x06\x78\x86\xb3\x0b\x0a\x4d\x9a\xa8\x01\xe9\xaf\xcf\x28\x50\xc8\x1d\x75\x91\x6a\xfc\x6d\x9c\x79\x0b\xa2\x53\xa3\xc3\x55\xc2\xee\x75\x08\x09\x5a\xb4\x94\x6a\x9a\x65\xeb\x3b\xb5\x82\xf6\x62\xcd\x46\x00\xe6\xa5\x24\xa2\xd0\x70\x73\xf7\x5c\xeb\x31\x61\xd8\x99\x99\xd9\x2f\x99\xb3\xd0\xb0\x59\x30\x14\x56\x2b\xb2\x15\x9f\xc9\x1b\x33\xea\x6f\x65\x52\x60\x7a\x11\x38\x6f\x88\x57\xeb\x8c\x2e\xc3\xc1\x80\x00\x9f\x61\x19\x57\x37\x94\xc6\xf4\x9f\x93\x44\x5d\x27\x44\x4a\xca\xdb\x58\x91\x95\xa0\x11\xb6\x45\xa1\x22\x78\x45\xe5\xdd\x0e\x5d\xed\xcd\xe0\x96\x23\x91\x8e\x4a\x2c\x07\x4f\x63\x92\x0e\x91\x00\xfc\x31\xb2\x64\x74\x31\x64\xea\xe0\x99\xfd\xf5\x34\xa9\x54\xcd\xa7\x2f\xd4\x4c\xfa\x69\x62\x65\x26\x52\x93\xb1\x52\xbe\xb6\xe0\xb8\x65\xf2\xac\xa3\x8e\xd3\xa1\xfd\xa3\xb7\xbb\x72\xb4\xa0\x15\x03\x39\xe9\xec\x6c\x3a\x7f\x6b\x6a\xe3\x3f\x6a\xb7\xae\xe3\x67\xb9\x90\x3e\xc3\xa1\xca\x56\xce\x73\x43\x06\xee\x25\xea\xd6\x8f\x64\x9f\x16\x79\x9c\x6e\x9a\xbc\x9f\xb7\x34\xf7\xcd\x31\xa6\x3a\x1b\x02\x92\x58\x63\x47\x5b\x2c\xc0\xf9\xe2\xd8\x25\x5a\x2f\xa6\xd6\x65\x9b\x83\x3b\x28\x35\xcb\x89\x66\xa4\xdf\x2e\x9d\xa0\xc8\xa7\x99\xdc\x7e\x54\xf9\xa3\x8d\x04\xbd\xaf\xe1\xf5\x4e\x63\xd5\xf4\x1f\x0f\x90\x89\x45\x23\x11\x3a\x2b\xa0\x45\xf3\xb2\x95\x74\x84\xc1\x78\x2e\x39\xfb\x76\x93\x70\x97\x6c\xf8\xfb\x76\x83\x95\x30\x3b\x6c\x9d\x7c\xd7\x2e\x96\xc0\x4f\x0c\xc1\xcd\xb7\x15\x1b\xdb\x91\xc1\x0b\x20\x53\x71\x5d\xb3\x9f\x65\xa4\x53\x59\xc1\xb4\x2b\x5b\xd5\xb1\xc5\xf4\x50\x58\xc4\xd0\x65\xcf\xfd\x2b\xb7\xfe\x21\x15\x04\x4d\x95\xf6\xd9\xf2\x5a\x9f\x9d\xdf\x0c\xe6\x9c\xb5\x1a\xd2\x00\x0b\x6e\x20\xfd\xc0\x05\x9f\x2b\xc4\xaa\x65\x57\x6e\xa8\x4f\xaa\x72\x37\xd8\xb2\x46\xc7\xe9\x1f\xca\x70\xad\x3e\x8b\xef\x98\x3c\xad\xe5\xa0\xec\x55\x8a\xeb\x43\x13\xf9\xaa\x12\x39\xf6\x83\x36\xeb\xac\x9e\x80\x61\xa1\xc7\xab\x98\xbc\xff\xa0\xd3\x30\x2a\x70\x45\x7e\x12\x30\x2b\x15\x22\x45\x08\x4d\x28\xe7\x0a\xe4\x21\xc8\x06\xc1\x4a\x29\x87\x91\x91\x9d\x2a\x97\x47\xaa\xb4\x77\x89\xe0\x7a\xc9\x11\x77\x80\x1b\x20\x56\x88\x9c\xee\x31\x7a\x94\x75\x0a\xa2\xb7\xf2\xe8\x24\x5c\x10\x8f\x41\xc5\x4a\x9d\xe4\xe0\x9d\x8f\x7b\xd3\xd3\xe6\x96\xbe\xc0\xd8\x2b\xef\x25\xf4\xe8\x9a\x55\x56\xc1\x7e\x6b\x78\x2a\x20\x59\xe8\xcb\xa0\xd6\x93\x81\x82\xdc\xd3\x8b\x43\xec\xb3\xd8\x59\x75\xf2\x49\x25\xe9\xc7\xe5\x22\x67\xa9\xdd\x39\x05\x63\x1e\x60\x57\xa1\x36\x4b\xc8\x44\xd8\x0c\x41\x6b\xaf\xe3\x62\xde\x7a\x0b\x00\x2d\xaa\x1c\xf5\x56\x06\x5f\x9f\x53\xb7\xbf\x7d\x07\x82\xb9\x69\x10\xc6\xfb\xb0\xee\xe5\xf3\x6b\x94\x4d\x70\x47\x5a\xd1\x19\xbd\xad\x8f\xf4\x93\x5a\x3c\x97\xd1\xed\x0a\x95\xa8\x6c\x80\xe8\x1d\x20\xf3\xb2\x49\xaf\x61\x56\xce\xdf\x9e\xd4\x31\xbb\xc6\xfb\x92\x5a\x4b\x24\x2a\x7d\x63\xdb\xc7\x5f\xc5\xb7\x73\xff\xd3\xbd\x19\x8c\x05\x71\x23\x6f\xa8\x93\x49\x92\xa9\x30\xbf\xe3\x13\x0a\x19\x52\x20\xba\xe7\xed\xa7\x2a\xd4\x15\x3d\x99\xa0\x6f\xff\x27\xcc\x41\x6e\x16\xbe\xa0\x51\xd7\x74\x49\x1d\xb0\xfc\x0d\x41\xba\xcd\xb7\x3c\x4e\x1e\xe1\x51\x30\x88\xce\x39\x54\x82\xfb\xdb\xe2\x01\x1e\x92\x39\x88\x49\x43\xdd\xc3\xb9\x1b\x66\xae\x17\xfc\x25\x0f\x65\xf5\xfb\x3e\x82\x75\xea\xa9\x25\xcd\x04\x6c\xa2\xdd\xc7\x50\x20\x3d\x88\xe8\x73\x39\x32\x71\xc7\xbd\xf9\x19\x0c\x2b\xc3\x4d\x00\x24\x72\x03\xb5\x7f\x03\x4d\xba\x6f\x0c\x22\x25\x3e\x23\x8f\xf6\xd0\x9a\x61\xaf\xcc\x4e\xa8\xae\xe5\x54\x5e\x32\x4d\xaf\xb1\x54\x62\xaa\x5c\x8b\x80\x20\x9d\x88\xfd\xf9\x9a\x39\x89\x89\x78\x91\xc0\x13\x32\x62\xcc\x1c\x02\x0a\x7a\xce\xbb\xae\xfa\xfe\x04\x7e\x1c\xf3\x94\x5a\xba\xca\x3a\xd8\xb3\x07\x87\xda\xf1\xd6\x3b\x8f\xf3\x06\x66\x20\x84\x9d\x66\x17\xe2\x7f\xe3\x60\x51\x41\xf4\xea\x57\x00\x25\xc0\x91\x76\x6d\xb2\x2c\x21\xe9\x82\x24\x5e\x7d\x91\xe2\x26\xec\xa3\xe2\xe5\xd6\xd2\x7b\x66\x79\x67\xff\xfa\xe0\x21\xaa\x82\x17\x8f\x28\x27\x3f\xdf\x2b\x75\x58\x0c\x5a\x58\xf4\x5c\xad\x11\x20\x15\xde\xd2\x64\xa5\x5e\x6b\x36\xe3\xe9\xfb\xfe\x31\x4d\x70\x97\x93\x1c\x33\xef\x67\x85\x48\x9b\x9c\x14\xcb\xaa\xb0\x61\x4d\xb3\x3f\x80\x59\xa3\x27\x60\xb9\x98\xf9\xe9\xa0\xb3\x37\x73\x39\xa0\x3f\xcd\xd7\x67\xc4\x24\x5d\xf0\x05\x79\xfc\xdf\x0f\x8d\x57\x68\x7b\x41\x76\x6d\xdf\xcd\xfb\x28\x5c\x4e\x0c\x8d\x33\xe6\xcd\xc9\xec\xc3\xc5\x88\x69\xee\x19\x8d\x61\xc2\x59\xaf\xf8\xdf\x60\xd8\x00\xd5\x73\x88\xfa\xbd\x53\x75\x9d\x92\x1a\xdc\x75\x13\x5e\x48\x14\xc4\x96\x47\x21\x9c\x63\x80\x78\x7b\x2e\xb3\x61\xeb\x73\x90\xfe\xea\x62\x10\x94\x09\x13\xaa\xc7\x21\x35\xf0\x07\xba\xe8\x42\x87\x80\x28\x6d\x8b\x31\x76\xae\x9d\x20\xee\xdc\x89\x64\x16\xfc\xe2\xc2\xab\x36\xed\x42\x89\x6f\xbf\xf5\x3b\x65\x44\x5d\xab\x99\x8d\x73\x1b\x1a\x23\x64\x46\xd3\xa8\x87\x10\x21\x55\xc4\xf6\x31\x9e\xba\x40\x50\xe9\xef\x0d\xab\x2e\x46\x1f\xd1\x0f\x1e\x94\xd1\x89\x63\x9c\xeb\x1d\x86\x28\xbd\xfb\x69\xfb\x8d\xba\x42\x99\xcc\x74\x89\xe8\x08\x03\x66\x82\xe3\x59\x18\x0c\x26\xac\xfd\xc6\x99\xb5\x48\x33\xa0\x94\xc2\x3d\x70\x61\x6b\xfa\x3d\xcb\xce\xe9\x71\x3b\x53\xec\x85\xb6\x6b\xe7\xb2\xad\x5e\xbf\xe9\xdb\x92\xac\x67\xbf\x7a\xc0\x8b\xb1\xc1\x59\xe0\x18\x7a\x05\x47\x4e\x45\x22\xff\x84\x97\xea\x45\xc0\xbd\xc1\x8c\xff\x73\x6f\x8e\xc8\x8e\xe5\xe6\xe5\x14\x4e\xf9\x1d\x3a\xdc\x61\x4a\x65\x79\xeb\x22\xf4\xaf\xe5\x9f\xfb\xce\x66\xc6\xee\x5e\xfe\x4d\x20\x6d\xe4\x9b\x3c\xf0\xbb\xb3\x8b\x3d\xaf\x00\xfa\x8b\x5f\x13\x15\x16\x60\xae\xe3\xf6\x66\x6a\x88\x92\x91\x9e\xaa\xb9\x26\x15\x24\x9b\x14\xde\xe6\xc7\xff\xfe\xf8\x5e\x27\x33\x37\x3c\x70\x44\x5a\x87\x70\xc4\x7e\xcb\x4b\x3b\x2a\x38\x94\x09\x01\xc0\x3b\xf7\xe5\x68\x49\x4b\xd4\xd2\xa9\x1f\x49\xbf\x05\x9f\x52\x14\x70\x55\x14\x1a\x82\xca\xcb\x3e\x2a\x24\x2e\xba\xcb\x37\x36\x8b\x3e\x2f\xd0\xf9\xb8\xbf\x81\x64\x22\xf9\xe5\x8b\xcb\x1b\xd7\x1c\xf8\x48\xf5\x2a\x0e\xe3\x6a\xb7\xd3\x97\xe0\x0b\xfa\xd3\x6a\x6d\x80\x62\x0b\x1f\x33\xe7\x49\xeb\x22\xad\x61\x14\x91\xe3\x28\x74\xe2\xd0\x8f\x90\x4d\xcb\x58\x60\x14\xee\x97\xee\xfb\xfe\x9e\x83\xa9\x00\x38\xa9\x5e\xbb\xeb\x84\x2e\x92\x36\xe7\xa4\xf0\xb4\xb5\x9e\xcd\x60\x98\x67\x5e\xa9\x77\x17\x29\x29\x5b\x02\xc8\x00\x3d\xd5\x29\xc2\x28\x53\x84\x71\x90\x8f\xdf\x0b\x53\xe2\xa1\xaf\xa0\x79\x66\x80\x3b\xb8\x99\xd7\x92\xa5\xdf\x91\x8a\x74\x1f\xba\x69\x0d\x51\xd8\x7a\xc9\x80\x5a\x30\x1e\x21\xc7\x71\xfd\x01\xcc\x9d\x33\xca\x53\x12\x46\x9e\xd4\x62\xae\x6e\x69\xf0\x9e\x6a\xef\x28\x86\x91\x80\x07\xe7\x21\x9b\x2d\x75\xab\x7e\xd9\x63\xde\xd2\x8f\x9a\x33\x67\xb0\xaf\xd1\x7b\xf0\x15\x45\x11\xcc\x77\xaf\x34\x44\x90\x92\x6b\x8a\x50\xd7\x57\x6f\x5a\x77\x7f\x9d\x8d\x3c\x82\x93\x7c\x12\x34\x05\x82\x9b\x7a\xe1\xe0\x5e\x55\x3e\x86\xfc\xcc\xd5\x3e\xa8\xbf\x6a\xc9\x51\xea\x05\xb7\x91\xca\x70\xea\xba\x0c\x7a\xdf\x08\x76\x6a\x77\xc2\xee\x66\x0b\x25\xfe\xbc\xe2\x5d\x56\x8b\x31\x75\x42\xf1\x02\x46\x59\xd6\x90\x7d\x6f\xfb\xb6\xdc\xa9\x9c\x82\x30\x68\xa0\x6f\x3b\xae\xd4\xd0\xa0\xbf\x96\xf7\x5b\x67\x21\x64\x04\x86\x72\xb6\x36\x25\x22\x0d\x45\x4a\x10\x63\xbd\xf3\x09\x6b\x98\x0b\x2f\x68\x05\xa2\x76\x0d\x43\x1b\x9b\x33\x3e\xbe\x5b\xb2\xc7\xa4\xed\x0d\xd6\xee\xe7\x3b\x05\x35\x42\x7c\x6c\x13\x02\x23\x48\x89\xf2\xca\x8e\x4d\xe8\x50\xc5\x63\xee\xfa\xc2\xb7\x92\x88\x8d\xdb\xc0\x33\xff\x05\x98\x90\x6f\xbd\x92\x8b\xc9\xbc\xd0\x30\x61\xbd\xcc\xf6\x17\xdf\x2c\xdf\xfa\x5f\xe4\xc5\x96\xb9\x57\x0b\xcd\x0c\xa6\xad\x8b\xfa\xac\x39\xdc\xb4\x1a\xe5\x36\x28\x8f\xd4\x6c\x37\xd1\x03\xfe\x2a\x87\x68\x09\xff\xd6\x90\xff\x06\x00\x00\xff\xff\xff\x20\xca\xfe\xa3\x0c\x00\x00")

func dataAuthPrivateRsapemKeyBytes() ([]byte, error) {
	return bindataRead(
		_dataAuthPrivateRsapemKey,
		"data/auth/private.rsapem.key",
	)
}

func dataAuthPrivateRsapemKey() (*asset, error) {
	bytes, err := dataAuthPrivateRsapemKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/auth/private.rsapem.key", size: 3235, mode: os.FileMode(436), modTime: time.Unix(1599845094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataAuthPublicRsapemKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\xcb\xd6\x63\x4a\x00\x46\xe7\x9e\xa2\xe7\xd6\x59\x14\x15\x64\xd0\x83\x42\x11\x11\x42\x05\x3f\x66\xc4\x35\xae\x71\x09\xf2\xf4\x67\x75\x4f\xfb\x1b\x7e\x7b\xba\xf7\x7f\x7f\x26\x63\xdd\xb0\x7f\x39\xbe\x7c\x33\x94\x5f\x26\x8e\xfe\x9e\x94\x65\x18\x8a\xf1\x42\xb6\x5c\x36\xef\xaa\xa9\xf5\xf3\xc6\xca\xc8\xc5\x1a\x42\x77\x05\x95\x12\xfa\xc3\x95\xd2\x54\x50\x89\x11\xab\x93\xf3\x9d\x70\xca\xbc\x46\x37\x45\x96\x09\xce\x40\x43\xf1\x18\xd4\x32\x7b\x5a\x05\x41\xfc\x94\x6c\x07\x62\x07\xdd\xf5\xc2\xff\xf6\x3c\x7b\x19\x0e\x33\xd5\xba\x57\xe2\x18\x0c\x53\x10\x58\xe0\x8d\x0c\x16\xc7\x85\xad\xbc\x31\xc3\xa3\xbd\xbe\x9d\x3e\xa1\x78\x3d\x9d\x79\x50\x6b\x55\x71\x56\xf2\xf4\x7d\x6a\x27\x02\x1f\xcb\xb7\x09\xc5\x1a\x34\x67\x3c\xdc\xe6\x63\xd7\x62\x16\x7e\x04\x76\x2a\x79\xd9\x38\x1a\x9b\xeb\x5b\xe1\x13\x18\x34\x0b\xea\x8b\x40\x39\x2f\xbe\x1e\xe6\xd9\x77\xdc\xdc\x5c\x41\xce\xd3\x5e\xe9\x4f\xa4\xe7\xb1\x2b\xf5\x22\x91\xf5\xef\xa6\x15\x5b\x54\xc4\x5c\x1d\x98\x6a\xff\x72\xad\xab\xc2\x1c\xcd\x9b\x15\x45\xf7\xe3\xcf\xd7\x92\x12\x74\x67\x7e\xb6\x72\xe4\xf1\xb3\x65\x44\x17\x9c\x17\xab\x65\x86\x25\xd7\x23\x6b\x4a\xb2\xcf\x60\x57\x8f\xab\x75\xdd\xcc\x4c\x0d\x99\xdb\x38\x11\x49\xe8\xf8\x85\x44\x18\x8e\x76\x97\xbd\x5e\x3f\xd4\xe3\xdc\x1d\xf0\x12\x90\x6c\x7a\x5e\x41\x27\xca\x34\x73\xd7\xe1\xa5\xe5\xfc\x5b\x35\xc2\xc7\x87\x91\xf8\x48\xcd\x15\x2f\xae\x7a\x95\x7d\x5b\x26\x86\xec\x42\x77\x93\xa9\x8d\x52\x82\xde\x47\x4c\x53\xb4\xac\xc8\x72\x96\xd6\xd6\x7d\x9d\xb3\xe4\x39\x3e\xd4\x62\x66\x72\xc4\x94\xc1\xc2\xef\x51\x8d\xa4\xb5\xbf\x69\x62\x81\xc1\x6e\xbf\xac\x0f\xc3\xeb\xd5\xf7\xd2\x58\x9b\x34\x5f\x94\x5a\x25\x6c\x44\xe9\x83\x1a\xe3\x55\xc5\x44\x58\x0f\xf8\xc8\x93\x55\xaf\x9e\xdb\x3a\x79\xe9\xe2\xa1\x2d\x1f\xef\xa0\xe9\x13\x28\xcc\x01\x08\x50\xd5\x2d\xcf\x4c\x2b\x90\x09\x57\x7b\x0f\x17\x8f\x30\x57\x1d\x50\xde\x48\xc7\xdf\x78\x40\x2c\xa4\x87\x0f\x99\x3c\x37\xbc\xa1\x7e\x14\xda\x51\xe5\x80\x45\xeb\x3a\xe8\xc5\x4d\x50\x7f\x08\xe7\xe4\x02\x23\x4a\xb9\xba\x67\x56\xca\xb4\xf5\xa1\xdc\xf6\x28\x47\x07\x55\xe5\xbd\xa3\x07\x97\x3e\x69\xe3\xa7\x6b\x69\xbb\x13\xf1\x51\x28\x18\xf0\x6c\x55\x47\x2c\xec\xc7\x93\x34\x2d\x4c\xf3\xd8\x32\xc2\xda\x04\xa5\xdf\x1b\x11\xf8\x39\x1f\x95\x7b\x52\xe3\xcd\xdf\x17\x6a\x64\xf8\x6f\x91\x06\xf6\x9b\xb3\xc9\xb1\x7b\x5f\x63\x18\x49\x80\xc6\xd1\x31\xa0\xcc\x24\xda\x9e\xc1\x50\xaf\x8b\x34\x5a\x7c\x4d\x3a\x77\xad\x20\x35\xc0\x7d\x3d\xe7\x07\x3c\x31\x63\x2e\x31\x06\xb5\x8a\x69\x13\xba\x48\x71\x06\x5e\x4a\x59\xba\x78\x6c\x35\xdd\x7b\xac\x82\x36\x8c\x90\xfb\xfb\x37\xf5\xd7\x78\x6c\xab\xff\x44\xf0\x7f\x00\x00\x00\xff\xff\x57\x09\x0f\xee\x20\x03\x00\x00")

func dataAuthPublicRsapemKeyBytes() ([]byte, error) {
	return bindataRead(
		_dataAuthPublicRsapemKey,
		"data/auth/public.rsapem.key",
	)
}

func dataAuthPublicRsapemKey() (*asset, error) {
	bytes, err := dataAuthPublicRsapemKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/auth/public.rsapem.key", size: 800, mode: os.FileMode(436), modTime: time.Unix(1599845094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/auth/keygen.go":          dataAuthKeygenGo,
	"data/auth/private.rsapem.key": dataAuthPrivateRsapemKey,
	"data/auth/public.rsapem.key":  dataAuthPublicRsapemKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"auth": &bintree{nil, map[string]*bintree{
			"keygen.go":          &bintree{dataAuthKeygenGo, map[string]*bintree{}},
			"private.rsapem.key": &bintree{dataAuthPrivateRsapemKey, map[string]*bintree{}},
			"public.rsapem.key":  &bintree{dataAuthPublicRsapemKey, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
